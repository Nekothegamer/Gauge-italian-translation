const fs = require("fs/promises");
const path = require("path");

const cwd = process.cwd();

const sourceFile = path.join(cwd, "_data_", "units.js");
const destFile = path.join(cwd, "src", "units", "index.js");

/**
 * To match multiline comments
 */
const comments = /\/\*\*[\s\S]*\*\//gm;
/**
 * To match lines containing certain properties,
 * place the property between the ( and ) braces
 * in the regex below.
 */
const replace = /(name|label): ".+"/gm;
const remove = /(full|plural): ".+",/gm;
const whiteSpaces = /\s+/gm;

const [arg, ...rest] = process.argv.slice(2);
if (rest.length) {
  console.error("Too many arguments");
  process.exit(1);
}

if (arg && !["--minify", "-m"].includes(arg)) {
  console.error("Invalid argument");
  process.exit(1);
}

async function processUnits() {
  try {
    let data = await fs.readFile(sourceFile, "utf-8");

    // Remove comments
    data.match(comments).forEach((comment) => {
      data = data.replace(comment, "");
    });

    // Mark specific strings for translation
    data.match(replace).forEach((propValuePair) => {
      const [prop, value] = propValuePair.split(":");
      data = data.replace(propValuePair, `${prop.trim()}: _(${value.trim()})`);
    });

    // Remove some property-value pairs
    data.match(remove).forEach((propValuePair) => {
      data = data.replace(propValuePair, "");
    });

    if (arg && ["--minify", "-m"].includes(arg)) {
      data = data.replaceAll(whiteSpaces, "");
    } else {
      data = "/** This file is autogenerated. Don't modify! */\n" + data;
    }

    data = data.replace("module.exports", "export const units")

    await fs.writeFile(destFile, data, "utf-8");
    return 0;
  } catch (error) {
    console.error(error);
    return 1;
  }
}

processUnits()
  .then(() => {
    console.log("Units processed successfully.");
  })
  .catch((error) => {
    console.log("Unit processing failed.");
  });
