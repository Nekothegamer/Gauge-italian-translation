const fs = require("fs/promises");
const path = require("path");

const sourceFile = path.join(__dirname, "units.js");
const destFile = path.join("src", "units", "index.js");

/**
 * To match multiline comments
 */
const comments = /\/\*\*[\s\S]*\*\//gm;
/**
 * To match lines containing certain properties,
 * place the property between the ( and ) braces
 * in the regex below.
 */
const replace = /(name|label): ".+"/gm;
const remove = /(full|plural): ".+",/gm;
const whiteSpaces = /\s+/gm;

const [arg, ...rest] = process.argv.slice(2);
if (rest.length) {
  console.error("Too many arguments");
  process.exit(1);
}

if (arg && !["--minify", "-m"].includes(arg)) {
  console.error("Invalid argument");
  process.exit(1);
}

async function processUnits() {
  try {
    let data = await fs.readFile(sourceFile, "utf-8");
    const [topmostComment, ...otherComments] = data.match(comments);
    const replacer = arg
      ? ""
      : "/** This file is autogenerated. Don't modify! */";

    if (topmostComment) {
      data = data.replace(topmostComment, replacer);
    }

    for (const comment of otherComments) {
      data = data.replace(comment, "");
    }

    const replaceProps = data.match(replace);
    for (const replaceProp of replaceProps) {
      const [prop, value] = replaceProp.split(":");
      data = data.replace(replaceProp, `${prop}: _(${value.trim()})`);
    }

    const removeProps = data.match(remove);
    for (const removeProp of removeProps) {
      data = data.replace(removeProp, "");
    }

    if(arg){
      data = data.replaceAll(whiteSpaces, "");
    }

    await fs.writeFile(destFile, data, "utf-8");
  } catch (error) {}
}

processUnits()
  .then(() => {
    console.log("Saved data successfully");
  })
  .catch((error) => {
    console.error(error);
  });
